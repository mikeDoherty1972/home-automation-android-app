package com.security.app

import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import com.google.firebase.firestore.FirebaseFirestore
import kotlinx.coroutines.*
import java.text.SimpleDateFormat
import java.util.*

class ScadaActivity : AppCompatActivity() {
    
    private lateinit var db: FirebaseFirestore
    private lateinit var googleSheetsReader: GoogleSheetsReader
    private var googleSheetsJob: Job? = null
    
    // UI Views
    private lateinit var waterTempValue: TextView
    private lateinit var waterTempStatus: TextView
    private lateinit var waterTempTrend: TextView
    private lateinit var waterPressureValue: TextView
    private lateinit var waterPressureStatus: TextView
    private lateinit var waterPressureTrend: TextView
    private lateinit var plcStatus: TextView
    private lateinit var diagnosticsText: TextView
    
    // DVR monitoring views
    private lateinit var dvrTemp: TextView
    private lateinit var dvrTempStatus: TextView
    
    // Weather monitoring views
    private lateinit var indoorTemp: TextView
    private lateinit var outdoorTemp: TextView
    private lateinit var outdoorHumidity: TextView
    private lateinit var windSpeed: TextView
    private lateinit var windDirectionArrow: TextView
    
    // Power monitoring views
    private lateinit var currentPower: TextView
    private lateinit var dailyPower: TextView
    private lateinit var currentAmps: TextView
    private lateinit var powerStatus: TextView
    
    // Lights control views
    private lateinit var lightsStatus: TextView
    private lateinit var lightsDetails: TextView
    
    // Data Usage Analytics views
    private lateinit var totalDataPoints: TextView
    private lateinit var activeSensors: TextView
    private lateinit var dataRate: TextView
    private lateinit var tempDataCount: TextView
    private lateinit var humidityDataCount: TextView
    private lateinit var windDataCount: TextView
    private lateinit var powerDataCount: TextView
    private lateinit var dvrDataCount: TextView
    private lateinit var dataUsageLastUpdate: TextView
    
    // Data point counters
    private var tempDataPoints = 0
    private var humidityDataPoints = 0
    private var windDataPoints = 0
    private var powerDataPoints = 0
    private var dvrDataPoints = 0
    private var totalDataPointsCount = 0
    private var activeSensorsCount = 0
    private var startTime = System.currentTimeMillis()
    
    private var lastTempValue = 0.0
    private var lastPressureValue = 0.0
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_scada)
        
        // Initialize Firebase for security sensors only
        db = FirebaseFirestore.getInstance()
        
        // Initialize Google Sheets reader for weather, geyser, and DVR data
        googleSheetsReader = GoogleSheetsReader()
        
        // Initialize all UI views
        initializeViews()
        
        // Setup click listeners and functionality
        setupGraphingClickListeners()
        
        // Listen for real-time gauge updates (security sensors from Firebase)
        listenForGaugeUpdates()
        
        // Start Google Sheets reading for weather/geyser/DVR data
        startGoogleSheetsReading()
        
        // Listen for lights status updates
        listenForLightsStatus()
    }
    
    private fun initializeViews() {
        // Water heating system views
        waterTempValue = findViewById(R.id.waterTempValue)
        waterTempStatus = findViewById(R.id.waterTempStatus)
        waterTempTrend = findViewById(R.id.waterTempTrend)
        waterPressureValue = findViewById(R.id.waterPressureValue)
        waterPressureStatus = findViewById(R.id.waterPressureStatus)
        waterPressureTrend = findViewById(R.id.waterPressureTrend)
        plcStatus = findViewById(R.id.plcStatus)
        diagnosticsText = findViewById(R.id.diagnosticsText)
        
        // DVR monitoring views
        dvrTemp = findViewById(R.id.dvrTemp)
        dvrTempStatus = findViewById(R.id.dvrTempStatus)
        
        // Analytics views
        totalDataPoints = findViewById(R.id.totalDataPoints)
        activeSensors = findViewById(R.id.activeSensors)
        dataRate = findViewById(R.id.dataRate)
        tempDataCount = findViewById(R.id.tempDataCount)
        humidityDataCount = findViewById(R.id.humidityDataCount)
        windDataCount = findViewById(R.id.windDataCount)
        powerDataCount = findViewById(R.id.powerDataCount)
        dvrDataCount = findViewById(R.id.dvrDataCount)
        dataUsageLastUpdate = findViewById(R.id.dataUsageLastUpdate)
        
        // Weather monitoring views
        indoorTemp = findViewById(R.id.indoorTemp)
        outdoorTemp = findViewById(R.id.outdoorTemp)
        outdoorHumidity = findViewById(R.id.outdoorHumidity)
        windSpeed = findViewById(R.id.windSpeed)
        windDirectionArrow = findViewById(R.id.windDirectionArrow)
        windDirectionArrow.visibility = View.VISIBLE
        windDirectionArrow.text = "↑"
        
        // Power monitoring views
        currentPower = findViewById(R.id.currentPower)
        dailyPower = findViewById(R.id.dailyPower)
        currentAmps = findViewById(R.id.currentAmps)
        powerStatus = findViewById(R.id.powerStatus)
        
        // Lights control views
        lightsStatus = findViewById(R.id.lightsStatus)
        lightsDetails = findViewById(R.id.lightsDetails)
        
        // Setup lights control buttons
        findViewById<android.widget.Button>(R.id.lightsOnButton).setOnClickListener {
            sendLightsCommand("on")
        }
        
        findViewById<android.widget.Button>(R.id.lightsOffButton).setOnClickListener {
            sendLightsCommand("off")
        }
        
        // Setup back button
        findViewById<TextView>(R.id.scadaBackButton).setOnClickListener {
            finish()
        }
    }
    
    /**
     * Start periodic reading from Google Sheets for weather, geyser, and DVR data
     * This replaces Firebase for non-security sensor data
     */
    private fun startGoogleSheetsReading() {
        googleSheetsJob = CoroutineScope(Dispatchers.Main).launch {
            while (true) {
                try {
                    // Read latest data from Google Sheets
                    val readings = googleSheetsReader.fetchLatestReadings(1)
                    if (readings.isNotEmpty()) {
                        val latestReading = readings[0]
                        updateFromGoogleSheets(latestReading)
                    }
                } catch (e: Exception) {
                    android.util.Log.e("ScadaActivity", "Google Sheets read error: ${e.message}")
                }
                
                // Update every 30 seconds
                delay(30000)
            }
        }
    }
    
    /**
     * Update displays with data from Google Sheets
     */
    private fun updateFromGoogleSheets(reading: GoogleSheetsReader.SensorReading) {
        runOnUiThread {
            // Update geyser temperature (40°C as you mentioned)
            waterTempValue.text = "${String.format("%.1f", reading.waterTemp)}°C"
            when {
                reading.waterTemp < 0 -> {
                    waterTempStatus.text = "❄️ Freezing!"
                    waterTempStatus.setTextColor(getColor(android.R.color.holo_blue_light))
                }
                reading.waterTemp > 80 -> {
                    waterTempStatus.text = "🔥 Too Hot!"
                    waterTempStatus.setTextColor(getColor(android.R.color.holo_red_light))
                }
                reading.waterTemp > 60 -> {
                    waterTempStatus.text = "🔥 Hot"
                    waterTempStatus.setTextColor(getColor(android.R.color.holo_orange_light))
                }
                else -> {
                    waterTempStatus.text = "✅ Normal Range"
                    waterTempStatus.setTextColor(getColor(android.R.color.holo_green_light))
                }
            }
            
            // Update geyser pressure (3.4 bar as you mentioned)
            waterPressureValue.text = "${String.format("%.1f", reading.waterPressure)} Bar"
            when {
                reading.waterPressure < 1.5 -> {
                    waterPressureStatus.text = "⚠️ Low Pressure"
                    waterPressureStatus.setTextColor(getColor(android.R.color.holo_red_light))
                }
                reading.waterPressure > 6.0 -> {
                    waterPressureStatus.text = "⚠️ High Pressure"
                    waterPressureStatus.setTextColor(getColor(android.R.color.holo_red_light))
                }
                else -> {
                    waterPressureStatus.text = "✅ Normal Range"
                    waterPressureStatus.setTextColor(getColor(android.R.color.holo_green_light))
                }
            }
            
            // Update DVR temperature from Google Sheets
            dvrTemp.text = "${String.format("%.1f", reading.dvrTemp)}°C"
            when {
                reading.dvrTemp > 45.0 -> {
                    dvrTempStatus.text = "🔥 Critical!"
                    dvrTempStatus.setTextColor(getColor(android.R.color.holo_red_light))
                }
                reading.dvrTemp > 35.0 -> {
                    dvrTempStatus.text = "⚠️ Warning"
                    dvrTempStatus.setTextColor(getColor(android.R.color.holo_orange_light))
                }
                else -> {
                    dvrTempStatus.text = "✅ Normal"
                    dvrTempStatus.setTextColor(getColor(android.R.color.holo_green_light))
                }
            }
            
            // Update weather data from Google Sheets
            indoorTemp.text = "${String.format("%.1f", reading.indoorTemp)}°C"
            outdoorTemp.text = "${String.format("%.1f", reading.outdoorTemp)}°C"
            outdoorHumidity.text = "${String.format("%.0f", reading.humidity)}%"
            windSpeed.text = "${String.format("%.1f", reading.windSpeed)} km/h"
            
            // Update wind direction arrow
            val windArrow = when (reading.windDirection.toInt()) {
                in 0..22 -> "↑"      // North
                in 23..67 -> "↗"     // Northeast  
                in 68..112 -> "→"    // East
                in 113..157 -> "↘"   // Southeast
                in 158..202 -> "↓"   // South
                in 203..247 -> "↙"   // Southwest
                in 248..292 -> "←"   // West
                in 293..337 -> "↖"   // Northwest
                else -> "↑"          // North (338-360)
            }
            windDirectionArrow.text = windArrow
            
            // Update power data from Google Sheets
            currentPower.text = "${String.format("%.2f", reading.currentPower)} kW"
            currentAmps.text = "${String.format("%.2f", reading.currentAmps)} A"
            dailyPower.text = "${String.format("%.1f", reading.dailyPower)} kWh"
            
            // Power status based on current draw
            when {
                reading.currentPower > 5.0 -> {
                    powerStatus.text = "⚡ High Usage"
                    powerStatus.setTextColor(getColor(android.R.color.holo_red_light))
                }
                reading.currentPower > 2.0 -> {
                    powerStatus.text = "⚡ Normal Usage"
                    powerStatus.setTextColor(getColor(android.R.color.holo_orange_light))
                }
                else -> {
                    powerStatus.text = "💡 Low Usage"
                    powerStatus.setTextColor(getColor(android.R.color.holo_green_light))
                }
            }
        }
    }
    
    override fun onDestroy() {
        super.onDestroy()
        // Cancel Google Sheets reading
        googleSheetsJob?.cancel()
    }
}vate lateinit var waterTempValue: TextView
    private lateinit var waterTempStatus: TextView
    private lateinit var waterTempTrend: TextView
    private lateinit var waterPressureValue: TextView
    private lateinit var waterPressureStatus: TextView
    private lateinit var waterPressureTrend: TextView
    private lateinit var plcStatus: TextView
    private lateinit var diagnosticsText: TextView
    
    // DVR monitoring views
    private lateinit var dvrTemp: TextView
    private lateinit var dvrTempStatus: TextView
    
    // Weather monitoring views
    private lateinit var indoorTemp: TextView
    private lateinit var outdoorTemp: TextView
    private lateinit var outdoorHumidity: TextView
    private lateinit var windSpeed: TextView
    private lateinit var windDirectionArrow: TextView
    
    // Power monitoring views
    private lateinit var currentPower: TextView
    private lateinit var dailyPower: TextView
    private lateinit var currentAmps: TextView
    private lateinit var powerStatus: TextView
    
    // Lights control views
    private lateinit var lightsStatus: TextView
    private lateinit var lightsDetails: TextView
    
    // Data Usage Anagram views
    private lateinit var totalDataPoints: TextView
    private lateinit var activeSensors: TextView
    private lateinit var dataRate: TextView
    private lateinit var tempDataCount: TextView
    private lateinit var humidityDataCount: TextView
    private lateinit var windDataCount: TextView
    private lateinit var powerDataCount: TextView
    private lateinit var dvrDataCount: TextView
    private lateinit var dataUsageLastUpdate: TextView
    
    // Data point counters
    private var tempDataPoints = 0
    private var humidityDataPoints = 0
    private var windDataPoints = 0
    private var powerDataPoints = 0
    private var dvrDataPoints = 0
    private var totalDataPointsCount = 0
    private var activeSensorsCount = 0
    private var startTime = System.currentTimeMillis()
    
    private var lastTempValue = 0.0
    private var lastPressureValue = 0.0
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_scada)
        
        // Initialize Firebase for security sensors only
        db = FirebaseFirestore.getInstance()
        
        // Initialize Google Sheets reader for weather, geyser, and DVR data
        googleSheetsReader = GoogleSheetsReader()
        
        // Initialize views
        waterTempValue = findViewById(R.id.waterTempValue)
        waterTempStatus = findViewById(R.id.waterTempStatus)
        waterTempTrend = findViewById(R.id.waterTempTrend)
        waterPressureValue = findViewById(R.id.waterPressureValue)
        waterPressureStatus = findViewById(R.id.waterPressureStatus)
        waterPressureTrend = findViewById(R.id.waterPressureTrend)
        plcStatus = findViewById(R.id.plcStatus)
        diagnosticsText = findViewById(R.id.diagnosticsText)
        
        // Initialize DVR monitoring views
        dvrTemp = findViewById(R.id.dvrTemp)
        dvrTempStatus = findViewById(R.id.dvrTempStatus)
        
        // Initialize analytics views
        totalDataPoints = findViewById(R.id.totalDataPoints)
        activeSensors = findViewById(R.id.activeSensors)
        dataRate = findViewById(R.id.dataRate)
        tempDataCount = findViewById(R.id.tempDataCount)
        humidityDataCount = findViewById(R.id.humidityDataCount)
        windDataCount = findViewById(R.id.windDataCount)
        powerDataCount = findViewById(R.id.powerDataCount)
        dvrDataCount = findViewById(R.id.dvrDataCount)
        dataUsageLastUpdate = findViewById(R.id.dataUsageLastUpdate)
        
        // Initialize weather monitoring views
        indoorTemp = findViewById(R.id.indoorTemp)
        outdoorTemp = findViewById(R.id.outdoorTemp)
        outdoorHumidity = findViewById(R.id.outdoorHumidity)
        windSpeed = findViewById(R.id.windSpeed)
        windDirectionArrow = findViewById(R.id.windDirectionArrow)
        
        // Ensure wind arrow is visible from start
        windDirectionArrow.visibility = View.VISIBLE
        windDirectionArrow.text = "↑"
        
        // Initialize power monitoring views
        currentPower = findViewById(R.id.currentPower)
        dailyPower = findViewById(R.id.dailyPower)
        currentAmps = findViewById(R.id.currentAmps)
        powerStatus = findViewById(R.id.powerStatus)
        
        // Initialize lights control views
        lightsStatus = findViewById(R.id.lightsStatus)
        lightsDetails = findViewById(R.id.lightsDetails)
        currentAmps = findViewById(R.id.currentAmps)
        powerStatus = findViewById(R.id.powerStatus)
        
        // Initialize lights control views
        lightsStatus = findViewById(R.id.lightsStatus)
        lightsDetails = findViewById(R.id.lightsDetails)
        
        // Setup lights control buttons
        findViewById<android.widget.Button>(R.id.lightsOnButton).setOnClickListener {
            sendLightsCommand("on")
        }
        
        findViewById<android.widget.Button>(R.id.lightsOffButton).setOnClickListener {
            sendLightsCommand("off")
        }
        
        // Setup back button
        findViewById<TextView>(R.id.scadaBackButton).setOnClickListener {
            finish()
        }
        
        // Setup click-to-graph functionality
        setupGraphingClickListeners()
        
        // Listen for real-time gauge updates (security sensors from Firebase)
        listenForGaugeUpdates()
        
        // Start Google Sheets reading for weather/geyser/DVR data
        startGoogleSheetsReading()
        
        // Listen for lights status updates
        listenForLightsStatus()
    }
    
    private fun setupGraphingClickListeners() {
        // Weather Station Click -> Weather Graphs
        findViewById<View>(R.id.weatherSection)?.setOnClickListener {
            val intent = android.content.Intent(this, WeatherGraphsActivity::class.java)
            startActivity(intent)
        }

        // Geyser Section Click -> Geyser Graphs  
        findViewById<View>(R.id.geyserSection)?.setOnClickListener {
            val intent = android.content.Intent(this, GeyserGraphsActivity::class.java)
            startActivity(intent)
        }

        // Power Monitoring Click -> Power Graphs
        findViewById<View>(R.id.powerSection)?.setOnClickListener {
            val intent = android.content.Intent(this, PowerGraphsActivity::class.java)
            startActivity(intent)
        }

        // DVR Section Click -> DVR Graphs
        findViewById<View>(R.id.dvrSection)?.setOnClickListener {
            val intent = android.content.Intent(this, DvrGraphsActivity::class.java)
            startActivity(intent)
        }
        
        // Individual Sensor Value Click Listeners
        setupIndividualSensorClicks()
    }
    
    private fun setupIndividualSensorClicks() {
        // Temperature values clickable -> Weather Graphs
        findViewById<View>(R.id.indoorTemp)?.setOnClickListener {
            val intent = android.content.Intent(this, WeatherGraphsActivity::class.java)
            startActivity(intent)
            android.widget.Toast.makeText(this, "📊 Opening Temperature Graphs", android.widget.Toast.LENGTH_SHORT).show()
        }
        
        findViewById<View>(R.id.outdoorTemp)?.setOnClickListener {
            val intent = android.content.Intent(this, WeatherGraphsActivity::class.java)
            startActivity(intent)
            android.widget.Toast.makeText(this, "📊 Opening Temperature Graphs", android.widget.Toast.LENGTH_SHORT).show()
        }
        
        // Humidity value clickable -> Weather Graphs
        findViewById<View>(R.id.outdoorHumidity)?.setOnClickListener {
            val intent = android.content.Intent(this, WeatherGraphsActivity::class.java)
            startActivity(intent)
            android.widget.Toast.makeText(this, "📊 Opening Humidity Graphs", android.widget.Toast.LENGTH_SHORT).show()
        }
        
        // Wind values clickable -> Weather Graphs
        findViewById<View>(R.id.windSpeed)?.setOnClickListener {
            val intent = android.content.Intent(this, WeatherGraphsActivity::class.java)
            startActivity(intent)
            android.widget.Toast.makeText(this, "📊 Opening Wind Graphs", android.widget.Toast.LENGTH_SHORT).show()
        }
        
        findViewById<View>(R.id.windDirectionArrow)?.setOnClickListener {
            val intent = android.content.Intent(this, WeatherGraphsActivity::class.java)
            startActivity(intent)
            android.widget.Toast.makeText(this, "📊 Opening Wind Direction Graphs", android.widget.Toast.LENGTH_SHORT).show()
        }
        
        // Power values clickable -> Power Graphs
        findViewById<View>(R.id.currentPower)?.setOnClickListener {
            val intent = android.content.Intent(this, PowerGraphsActivity::class.java)
            startActivity(intent)
            android.widget.Toast.makeText(this, "📊 Opening Power Consumption Graphs", android.widget.Toast.LENGTH_SHORT).show()
        }
        
        findViewById<View>(R.id.currentAmps)?.setOnClickListener {
            val intent = android.content.Intent(this, PowerGraphsActivity::class.java)
            startActivity(intent)
            android.widget.Toast.makeText(this, "📊 Opening Current Draw Graphs", android.widget.Toast.LENGTH_SHORT).show()
        }
        
        findViewById<View>(R.id.dailyPower)?.setOnClickListener {
            val intent = android.content.Intent(this, PowerGraphsActivity::class.java)
            startActivity(intent)
            android.widget.Toast.makeText(this, "📊 Opening Daily Power Graphs", android.widget.Toast.LENGTH_SHORT).show()
        }
        
        // DVR temperature clickable -> DVR Graphs
        findViewById<View>(R.id.dvrTemp)?.setOnClickListener {
            val intent = android.content.Intent(this, DvrGraphsActivity::class.java)
            startActivity(intent)
            android.widget.Toast.makeText(this, "📊 Opening DVR Temperature Graphs", android.widget.Toast.LENGTH_SHORT).show()
        }
        
        // Water temperature values clickable -> Geyser Graphs
        findViewById<View>(R.id.waterTempValue)?.setOnClickListener {
            val intent = android.content.Intent(this, GeyserGraphsActivity::class.java)
            startActivity(intent)
            android.widget.Toast.makeText(this, "📊 Opening Water Temperature Graphs", android.widget.Toast.LENGTH_SHORT).show()
        }
        
        findViewById<View>(R.id.waterPressureValue)?.setOnClickListener {
            val intent = android.content.Intent(this, GeyserGraphsActivity::class.java)
            startActivity(intent)
            android.widget.Toast.makeText(this, "📊 Opening Water Pressure Graphs", android.widget.Toast.LENGTH_SHORT).show()
        }
    }
    
    private fun sendLightsCommand(command: String) {
        val commandData = hashMapOf(
            "lights_command" to command,
            "timestamp" to com.google.firebase.Timestamp.now(),
            "source" to "android_app",
            "processed" to false
        )
        
        db.collection("lights_commands").document("current_command")
            .set(commandData)
            .addOnSuccessListener {
                android.util.Log.d("ScadaActivity", "Lights command sent: $command")
            }
            .addOnFailureListener { e ->
                android.util.Log.w("ScadaActivity", "Error sending lights command", e)
            }
    }
    
    private fun listenForLightsStatus() {
        db.collection("scada_controls").document("lights_status")
            .addSnapshotListener { documentSnapshot, e ->
                if (e != null) {
                    android.util.Log.w("ScadaActivity", "Lights status listen failed.", e)
                    return@addSnapshotListener
                }
                
                if (documentSnapshot != null && documentSnapshot.exists()) {
                    val data = documentSnapshot.data ?: return@addSnapshotListener
                    updateLightsDisplay(data)
                }
            }
    }
    
    private fun updateLightsDisplay(data: Map<String, Any>) {
        runOnUiThread {
            val lightsOn = data["lights_on"] as? Boolean ?: false
            val lastCommand = data["last_command"] as? String ?: "--"
            val m22Value = data["M22_write_sent"] as? Long ?: 0
            val y21Value = data["Y21_read_status"] as? Long ?: 0
            val commandSuccess = data["command_success"] as? Boolean ?: false
            
            // Update status display
            if (lightsOn) {
                lightsStatus.text = "🟢 ON"
                lightsStatus.setTextColor(getColor(android.R.color.holo_green_light))
            } else {
                lightsStatus.text = "🔴 OFF"
                lightsStatus.setTextColor(getColor(android.R.color.holo_red_light))
            }
            
            // Update technical details
            val successIcon = if (commandSuccess) "✅" else "❌"
            lightsDetails.text = "Sent TXT: $m22Value | Y21_read: $y21Value | $successIcon Last: $lastCommand"
        }
    }
    
    private fun listenForGaugeUpdates() {
        db.collection("security sensors").document("plc_status")
            .addSnapshotListener { documentSnapshot, e ->
                if (e != null) {
                    android.util.Log.w("ScadaActivity", "Listen failed.", e)
                    return@addSnapshotListener
                }
                
                if (documentSnapshot != null && documentSnapshot.exists()) {
                    updateGaugeDisplay(documentSnapshot.data ?: emptyMap())
                }
            }
    }
    
    private fun updateGaugeDisplay(data: Map<String, Any>) {
        val currentTime = SimpleDateFormat("HH:mm:ss", Locale.getDefault()).format(Date())
        
        // Update Water Temperature
        val waterTemp = (data["WaterTemp"] as? Double) ?: -999.0
        if (waterTemp != -999.0) {
            runOnUiThread {
                waterTempValue.text = "${String.format("%.1f", waterTemp)}°C"
                
                // Temperature status and color (Celsius ranges)
                when {
                    waterTemp < 0 -> {
                        waterTempStatus.text = "❄️ Freezing!"
                        waterTempStatus.setTextColor(getColor(android.R.color.holo_blue_light))
                    }
                    waterTemp > 80 -> {
                        waterTempStatus.text = "🔥 Too Hot!"
                        waterTempStatus.setTextColor(getColor(android.R.color.holo_red_light))
                    }
                    waterTemp > 60 -> {
                        waterTempStatus.text = "🔥 Hot"
                        waterTempStatus.setTextColor(getColor(android.R.color.holo_orange_light))
                    }
                    else -> {
                        waterTempStatus.text = "✅ Normal Range"
                        waterTempStatus.setTextColor(getColor(android.R.color.holo_green_light))
                    }
                }
                
                // Temperature trend
                waterTempTrend.text = when {
                    waterTemp > lastTempValue + 1 -> "↗"
                    waterTemp < lastTempValue - 1 -> "↘"
                    else -> "→"
                }
                
                lastTempValue = waterTemp
            }
        }
        
        // Update Water Pressure (in Bar)
        val waterPressure = (data["WaterPressure"] as? Double) ?: -999.0
        if (waterPressure != -999.0) {
            runOnUiThread {
                waterPressureValue.text = "${String.format("%.1f", waterPressure)} Bar"
                
                // Pressure status and color (Bar ranges for geyser)
                when {
                    waterPressure < 2.0 -> {
                        waterPressureStatus.text = "⚠️ Low Pressure"
                        waterPressureStatus.setTextColor(getColor(android.R.color.holo_orange_light))
                    }
                    waterPressure > 6.0 -> {
                        waterPressureStatus.text = "⚠️ High Pressure"
                        waterPressureStatus.setTextColor(getColor(android.R.color.holo_red_light))
                    }
                    else -> {
                        waterPressureStatus.text = "✅ Normal Range"
                        waterPressureStatus.setTextColor(getColor(android.R.color.holo_green_light))
                    }
                }
                
                // Pressure trend
                waterPressureTrend.text = when {
                    waterPressure > lastPressureValue + 2 -> "↗"
                    waterPressure < lastPressureValue - 2 -> "↘"
                    else -> "→"
                }
                
                lastPressureValue = waterPressure
            }
        }
        
        // Update diagnostics
        val tempSensorStatus = if (waterTemp != -999.0) "Online" else "Offline"
        val pressureSensorStatus = if (waterPressure != -999.0) "Online" else "Offline"
        
        runOnUiThread {
            plcStatus.text = "🟢 PLC Online - Ready for Integration"
            
            diagnosticsText.text = """
                Last Update: $currentTime
                Water Temp Sensor: $tempSensorStatus
                Pressure Sensor: $pressureSensorStatus
                PLC Connection: Ready
                Data Points: ${data.size} active sensors
            """.trimIndent()
        }
    }
    
    private fun listenForPLCUpdates() {
        db.collection("security sensors").document("plc_status")
            .addSnapshotListener { documentSnapshot, e ->
                if (e != null) {
                    android.util.Log.w("ScadaActivity", "PLC Listen failed.", e)
                    return@addSnapshotListener
                }
                
                if (documentSnapshot != null && documentSnapshot.exists()) {
                    updatePLCDisplay(documentSnapshot.data ?: emptyMap())
                }
            }
    }
    
    private fun updatePLCDisplay(data: Map<String, Any>) {
        runOnUiThread {
            // Firebase now only handles security sensor data
            // Weather, geyser, and DVR data come from Google Sheets
            
            // Only process actual security sensor data here
            // Weather, geyser, DVR, and power data now come from Google Sheets
            
            // Add any actual security sensor processing if needed
            // (Door sensors, motion detectors, alarm states, etc.)
            
            // Update analytics display
            updateAnalytics()
        }
    }
    
    private fun updateAnalytics() {
        // Update individual data counts
        tempDataCount.text = "$tempDataPoints points"
        humidityDataCount.text = "$humidityDataPoints points"
        windDataCount.text = "$windDataPoints points"
        powerDataCount.text = "$powerDataPoints points"
        dvrDataCount.text = "$dvrDataPoints points"
        
        // Update totals
        totalDataPointsCount = tempDataPoints + humidityDataPoints + windDataPoints + powerDataPoints + dvrDataPoints
        activeSensorsCount = listOf(tempDataPoints, humidityDataPoints, windDataPoints, powerDataPoints, dvrDataPoints).count { it > 0 }
        
        totalDataPoints.text = "$totalDataPointsCount total points"
        activeSensors.text = "$activeSensorsCount active sensors"
        
        // Calculate data rate (points per minute)
        val elapsed = (System.currentTimeMillis() - startTime) / 60000.0 // minutes
        val dataRateValue = if (elapsed > 0) (totalDataPointsCount / elapsed).toInt() else 0
        dataRate.text = "$dataRateValue/min"
        
        // Update last update time
        val currentTime = SimpleDateFormat("HH:mm:ss", Locale.getDefault()).format(Date())
        dataUsageLastUpdate.text = "Last Updated: $currentTime"
    }
}